'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Database1")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBlood(instance As Blood)
    End Sub
  Partial Private Sub UpdateBlood(instance As Blood)
    End Sub
  Partial Private Sub DeleteBlood(instance As Blood)
    End Sub
  Partial Private Sub InsertCon1(instance As Con1)
    End Sub
  Partial Private Sub UpdateCon1(instance As Con1)
    End Sub
  Partial Private Sub DeleteCon1(instance As Con1)
    End Sub
  Partial Private Sub InsertDoctor(instance As Doctor)
    End Sub
  Partial Private Sub UpdateDoctor(instance As Doctor)
    End Sub
  Partial Private Sub DeleteDoctor(instance As Doctor)
    End Sub
  Partial Private Sub InsertDonation(instance As Donation)
    End Sub
  Partial Private Sub UpdateDonation(instance As Donation)
    End Sub
  Partial Private Sub DeleteDonation(instance As Donation)
    End Sub
  Partial Private Sub InsertMosque(instance As Mosque)
    End Sub
  Partial Private Sub UpdateMosque(instance As Mosque)
    End Sub
  Partial Private Sub DeleteMosque(instance As Mosque)
    End Sub
  Partial Private Sub InsertOtherDonation(instance As OtherDonation)
    End Sub
  Partial Private Sub UpdateOtherDonation(instance As OtherDonation)
    End Sub
  Partial Private Sub DeleteOtherDonation(instance As OtherDonation)
    End Sub
  Partial Private Sub InsertPlatForm(instance As PlatForm)
    End Sub
  Partial Private Sub UpdatePlatForm(instance As PlatForm)
    End Sub
  Partial Private Sub DeletePlatForm(instance As PlatForm)
    End Sub
  Partial Private Sub Insertpoint(instance As point)
    End Sub
  Partial Private Sub Updatepoint(instance As point)
    End Sub
  Partial Private Sub Deletepoint(instance As point)
    End Sub
  Partial Private Sub Insertuser(instance As user)
    End Sub
  Partial Private Sub Updateuser(instance As user)
    End Sub
  Partial Private Sub Deleteuser(instance As user)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.عطاؤنا.My.MySettings.Default.Database1ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Bloods() As System.Data.Linq.Table(Of Blood)
		Get
			Return Me.GetTable(Of Blood)
		End Get
	End Property
	
	Public ReadOnly Property Con1s() As System.Data.Linq.Table(Of Con1)
		Get
			Return Me.GetTable(Of Con1)
		End Get
	End Property
	
	Public ReadOnly Property Doctors() As System.Data.Linq.Table(Of Doctor)
		Get
			Return Me.GetTable(Of Doctor)
		End Get
	End Property
	
	Public ReadOnly Property Donations() As System.Data.Linq.Table(Of Donation)
		Get
			Return Me.GetTable(Of Donation)
		End Get
	End Property
	
	Public ReadOnly Property Mosques() As System.Data.Linq.Table(Of Mosque)
		Get
			Return Me.GetTable(Of Mosque)
		End Get
	End Property
	
	Public ReadOnly Property OtherDonations() As System.Data.Linq.Table(Of OtherDonation)
		Get
			Return Me.GetTable(Of OtherDonation)
		End Get
	End Property
	
	Public ReadOnly Property PlatForms() As System.Data.Linq.Table(Of PlatForm)
		Get
			Return Me.GetTable(Of PlatForm)
		End Get
	End Property
	
	Public ReadOnly Property points() As System.Data.Linq.Table(Of point)
		Get
			Return Me.GetTable(Of point)
		End Get
	End Property
	
	Public ReadOnly Property users() As System.Data.Linq.Table(Of user)
		Get
			Return Me.GetTable(Of user)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Blood")>  _
Partial Public Class Blood
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBlood As Integer
	
	Private _IdDon As System.Nullable(Of Integer)
	
	Private _BloodType As String
	
	Private _HealthStatus As String
	
	Private _Donation As EntityRef(Of Donation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBloodChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBloodChanged()
    End Sub
    Partial Private Sub OnIdDonChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDonChanged()
    End Sub
    Partial Private Sub OnBloodTypeChanging(value As String)
    End Sub
    Partial Private Sub OnBloodTypeChanged()
    End Sub
    Partial Private Sub OnHealthStatusChanging(value As String)
    End Sub
    Partial Private Sub OnHealthStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Donation = CType(Nothing, EntityRef(Of Donation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBlood", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdBlood() As Integer
		Get
			Return Me._IdBlood
		End Get
		Set
			If ((Me._IdBlood = value)  _
						= false) Then
				Me.OnIdBloodChanging(value)
				Me.SendPropertyChanging
				Me._IdBlood = value
				Me.SendPropertyChanged("IdBlood")
				Me.OnIdBloodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDon", DbType:="Int")>  _
	Public Property IdDon() As System.Nullable(Of Integer)
		Get
			Return Me._IdDon
		End Get
		Set
			If (Me._IdDon.Equals(value) = false) Then
				If Me._Donation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdDonChanging(value)
				Me.SendPropertyChanging
				Me._IdDon = value
				Me.SendPropertyChanged("IdDon")
				Me.OnIdDonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloodType", DbType:="VarChar(50)")>  _
	Public Property BloodType() As String
		Get
			Return Me._BloodType
		End Get
		Set
			If (String.Equals(Me._BloodType, value) = false) Then
				Me.OnBloodTypeChanging(value)
				Me.SendPropertyChanging
				Me._BloodType = value
				Me.SendPropertyChanged("BloodType")
				Me.OnBloodTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HealthStatus", DbType:="VarChar(50)")>  _
	Public Property HealthStatus() As String
		Get
			Return Me._HealthStatus
		End Get
		Set
			If (String.Equals(Me._HealthStatus, value) = false) Then
				Me.OnHealthStatusChanging(value)
				Me.SendPropertyChanging
				Me._HealthStatus = value
				Me.SendPropertyChanged("HealthStatus")
				Me.OnHealthStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Donation_Blood", Storage:="_Donation", ThisKey:="IdDon", OtherKey:="IdDon", IsForeignKey:=true)>  _
	Public Property Donation() As Donation
		Get
			Return Me._Donation.Entity
		End Get
		Set
			Dim previousValue As Donation = Me._Donation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Donation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Donation.Entity = Nothing
					previousValue.Bloods.Remove(Me)
				End If
				Me._Donation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bloods.Add(Me)
					Me._IdDon = value.IdDon
				Else
					Me._IdDon = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Donation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Con1")>  _
Partial Public Class Con1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdC As Integer
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _IdD As System.Nullable(Of Integer)
	
	Private _Question As String
	
	Private _Answer As String
	
	Private _Doctor As EntityRef(Of Doctor)
	
	Private _user As EntityRef(Of user)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnIdDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDChanged()
    End Sub
    Partial Private Sub OnQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionChanged()
    End Sub
    Partial Private Sub OnAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Doctor = CType(Nothing, EntityRef(Of Doctor))
		Me._user = CType(Nothing, EntityRef(Of user))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdC", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdC() As Integer
		Get
			Return Me._IdC
		End Get
		Set
			If ((Me._IdC = value)  _
						= false) Then
				Me.OnIdCChanging(value)
				Me.SendPropertyChanging
				Me._IdC = value
				Me.SendPropertyChanged("IdC")
				Me.OnIdCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				If Me._user.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdD", DbType:="Int")>  _
	Public Property IdD() As System.Nullable(Of Integer)
		Get
			Return Me._IdD
		End Get
		Set
			If (Me._IdD.Equals(value) = false) Then
				If Me._Doctor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdDChanging(value)
				Me.SendPropertyChanging
				Me._IdD = value
				Me.SendPropertyChanged("IdD")
				Me.OnIdDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Question", DbType:="VarChar(50)")>  _
	Public Property Question() As String
		Get
			Return Me._Question
		End Get
		Set
			If (String.Equals(Me._Question, value) = false) Then
				Me.OnQuestionChanging(value)
				Me.SendPropertyChanging
				Me._Question = value
				Me.SendPropertyChanged("Question")
				Me.OnQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer", DbType:="VarChar(50)")>  _
	Public Property Answer() As String
		Get
			Return Me._Answer
		End Get
		Set
			If (String.Equals(Me._Answer, value) = false) Then
				Me.OnAnswerChanging(value)
				Me.SendPropertyChanging
				Me._Answer = value
				Me.SendPropertyChanged("Answer")
				Me.OnAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Doctor_Con1", Storage:="_Doctor", ThisKey:="IdD", OtherKey:="IdD", IsForeignKey:=true)>  _
	Public Property Doctor() As Doctor
		Get
			Return Me._Doctor.Entity
		End Get
		Set
			Dim previousValue As Doctor = Me._Doctor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Doctor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Doctor.Entity = Nothing
					previousValue.Con1s.Remove(Me)
				End If
				Me._Doctor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Con1s.Add(Me)
					Me._IdD = value.IdD
				Else
					Me._IdD = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Doctor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_Con1", Storage:="_user", ThisKey:="IdUser", OtherKey:="IdUser", IsForeignKey:=true)>  _
	Public Property user() As user
		Get
			Return Me._user.Entity
		End Get
		Set
			Dim previousValue As user = Me._user.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._user.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._user.Entity = Nothing
					previousValue.Con1s.Remove(Me)
				End If
				Me._user.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Con1s.Add(Me)
					Me._IdUser = value.IdUser
				Else
					Me._IdUser = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("user")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Doctor")>  _
Partial Public Class Doctor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdD As Integer
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _Major As String
	
	Private _Con1s As EntitySet(Of Con1)
	
	Private _user As EntityRef(Of user)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdDChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnMajorChanging(value As String)
    End Sub
    Partial Private Sub OnMajorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Con1s = New EntitySet(Of Con1)(AddressOf Me.attach_Con1s, AddressOf Me.detach_Con1s)
		Me._user = CType(Nothing, EntityRef(Of user))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdD", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdD() As Integer
		Get
			Return Me._IdD
		End Get
		Set
			If ((Me._IdD = value)  _
						= false) Then
				Me.OnIdDChanging(value)
				Me.SendPropertyChanging
				Me._IdD = value
				Me.SendPropertyChanged("IdD")
				Me.OnIdDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				If Me._user.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Major", DbType:="VarChar(50)")>  _
	Public Property Major() As String
		Get
			Return Me._Major
		End Get
		Set
			If (String.Equals(Me._Major, value) = false) Then
				Me.OnMajorChanging(value)
				Me.SendPropertyChanging
				Me._Major = value
				Me.SendPropertyChanged("Major")
				Me.OnMajorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Doctor_Con1", Storage:="_Con1s", ThisKey:="IdD", OtherKey:="IdD")>  _
	Public Property Con1s() As EntitySet(Of Con1)
		Get
			Return Me._Con1s
		End Get
		Set
			Me._Con1s.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_Doctor", Storage:="_user", ThisKey:="IdUser", OtherKey:="IdUser", IsForeignKey:=true)>  _
	Public Property user() As user
		Get
			Return Me._user.Entity
		End Get
		Set
			Dim previousValue As user = Me._user.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._user.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._user.Entity = Nothing
					previousValue.Doctors.Remove(Me)
				End If
				Me._user.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Doctors.Add(Me)
					Me._IdUser = value.IdUser
				Else
					Me._IdUser = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("user")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Con1s(ByVal entity As Con1)
		Me.SendPropertyChanging
		entity.Doctor = Me
	End Sub
	
	Private Sub detach_Con1s(ByVal entity As Con1)
		Me.SendPropertyChanging
		entity.Doctor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Donation")>  _
Partial Public Class Donation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdDon As Integer
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _Region As String
	
	Private _PhonNoDo As String
	
	Private _Bloods As EntitySet(Of Blood)
	
	Private _Mosques As EntitySet(Of Mosque)
	
	Private _OtherDonations As EntitySet(Of OtherDonation)
	
	Private _user As EntityRef(Of user)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdDonChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdDonChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnRegionChanging(value As String)
    End Sub
    Partial Private Sub OnRegionChanged()
    End Sub
    Partial Private Sub OnPhonNoDoChanging(value As String)
    End Sub
    Partial Private Sub OnPhonNoDoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bloods = New EntitySet(Of Blood)(AddressOf Me.attach_Bloods, AddressOf Me.detach_Bloods)
		Me._Mosques = New EntitySet(Of Mosque)(AddressOf Me.attach_Mosques, AddressOf Me.detach_Mosques)
		Me._OtherDonations = New EntitySet(Of OtherDonation)(AddressOf Me.attach_OtherDonations, AddressOf Me.detach_OtherDonations)
		Me._user = CType(Nothing, EntityRef(Of user))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDon", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdDon() As Integer
		Get
			Return Me._IdDon
		End Get
		Set
			If ((Me._IdDon = value)  _
						= false) Then
				Me.OnIdDonChanging(value)
				Me.SendPropertyChanging
				Me._IdDon = value
				Me.SendPropertyChanged("IdDon")
				Me.OnIdDonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				If Me._user.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="VarChar(50)")>  _
	Public Property Region() As String
		Get
			Return Me._Region
		End Get
		Set
			If (String.Equals(Me._Region, value) = false) Then
				Me.OnRegionChanging(value)
				Me.SendPropertyChanging
				Me._Region = value
				Me.SendPropertyChanged("Region")
				Me.OnRegionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhonNoDo", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property PhonNoDo() As String
		Get
			Return Me._PhonNoDo
		End Get
		Set
			If (String.Equals(Me._PhonNoDo, value) = false) Then
				Me.OnPhonNoDoChanging(value)
				Me.SendPropertyChanging
				Me._PhonNoDo = value
				Me.SendPropertyChanged("PhonNoDo")
				Me.OnPhonNoDoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Donation_Blood", Storage:="_Bloods", ThisKey:="IdDon", OtherKey:="IdDon")>  _
	Public Property Bloods() As EntitySet(Of Blood)
		Get
			Return Me._Bloods
		End Get
		Set
			Me._Bloods.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Donation_Mosque", Storage:="_Mosques", ThisKey:="IdDon", OtherKey:="IdDon")>  _
	Public Property Mosques() As EntitySet(Of Mosque)
		Get
			Return Me._Mosques
		End Get
		Set
			Me._Mosques.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Donation_OtherDonation", Storage:="_OtherDonations", ThisKey:="IdDon", OtherKey:="IdDon")>  _
	Public Property OtherDonations() As EntitySet(Of OtherDonation)
		Get
			Return Me._OtherDonations
		End Get
		Set
			Me._OtherDonations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_Donation", Storage:="_user", ThisKey:="IdUser", OtherKey:="IdUser", IsForeignKey:=true)>  _
	Public Property user() As user
		Get
			Return Me._user.Entity
		End Get
		Set
			Dim previousValue As user = Me._user.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._user.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._user.Entity = Nothing
					previousValue.Donations.Remove(Me)
				End If
				Me._user.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Donations.Add(Me)
					Me._IdUser = value.IdUser
				Else
					Me._IdUser = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("user")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bloods(ByVal entity As Blood)
		Me.SendPropertyChanging
		entity.Donation = Me
	End Sub
	
	Private Sub detach_Bloods(ByVal entity As Blood)
		Me.SendPropertyChanging
		entity.Donation = Nothing
	End Sub
	
	Private Sub attach_Mosques(ByVal entity As Mosque)
		Me.SendPropertyChanging
		entity.Donation = Me
	End Sub
	
	Private Sub detach_Mosques(ByVal entity As Mosque)
		Me.SendPropertyChanging
		entity.Donation = Nothing
	End Sub
	
	Private Sub attach_OtherDonations(ByVal entity As OtherDonation)
		Me.SendPropertyChanging
		entity.Donation = Me
	End Sub
	
	Private Sub detach_OtherDonations(ByVal entity As OtherDonation)
		Me.SendPropertyChanging
		entity.Donation = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Mosque")>  _
Partial Public Class Mosque
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdM As Integer
	
	Private _IdDon As System.Nullable(Of Integer)
	
	Private _Address As String
	
	Private _TypeOfNeed As String
	
	Private _Donation As EntityRef(Of Donation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdMChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdMChanged()
    End Sub
    Partial Private Sub OnIdDonChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDonChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnTypeOfNeedChanging(value As String)
    End Sub
    Partial Private Sub OnTypeOfNeedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Donation = CType(Nothing, EntityRef(Of Donation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdM", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdM() As Integer
		Get
			Return Me._IdM
		End Get
		Set
			If ((Me._IdM = value)  _
						= false) Then
				Me.OnIdMChanging(value)
				Me.SendPropertyChanging
				Me._IdM = value
				Me.SendPropertyChanged("IdM")
				Me.OnIdMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDon", DbType:="Int")>  _
	Public Property IdDon() As System.Nullable(Of Integer)
		Get
			Return Me._IdDon
		End Get
		Set
			If (Me._IdDon.Equals(value) = false) Then
				If Me._Donation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdDonChanging(value)
				Me.SendPropertyChanging
				Me._IdDon = value
				Me.SendPropertyChanged("IdDon")
				Me.OnIdDonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfNeed", DbType:="VarChar(50)")>  _
	Public Property TypeOfNeed() As String
		Get
			Return Me._TypeOfNeed
		End Get
		Set
			If (String.Equals(Me._TypeOfNeed, value) = false) Then
				Me.OnTypeOfNeedChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfNeed = value
				Me.SendPropertyChanged("TypeOfNeed")
				Me.OnTypeOfNeedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Donation_Mosque", Storage:="_Donation", ThisKey:="IdDon", OtherKey:="IdDon", IsForeignKey:=true)>  _
	Public Property Donation() As Donation
		Get
			Return Me._Donation.Entity
		End Get
		Set
			Dim previousValue As Donation = Me._Donation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Donation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Donation.Entity = Nothing
					previousValue.Mosques.Remove(Me)
				End If
				Me._Donation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mosques.Add(Me)
					Me._IdDon = value.IdDon
				Else
					Me._IdDon = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Donation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OtherDonation")>  _
Partial Public Class OtherDonation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdO As Integer
	
	Private _IdDon As System.Nullable(Of Integer)
	
	Private _NumeOfProduct As String
	
	Private _Description As String
	
	Private _Found As String
	
	Private _Donation As EntityRef(Of Donation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdOChanged()
    End Sub
    Partial Private Sub OnIdDonChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDonChanged()
    End Sub
    Partial Private Sub OnNumeOfProductChanging(value As String)
    End Sub
    Partial Private Sub OnNumeOfProductChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnFoundChanging(value As String)
    End Sub
    Partial Private Sub OnFoundChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Donation = CType(Nothing, EntityRef(Of Donation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdO() As Integer
		Get
			Return Me._IdO
		End Get
		Set
			If ((Me._IdO = value)  _
						= false) Then
				Me.OnIdOChanging(value)
				Me.SendPropertyChanging
				Me._IdO = value
				Me.SendPropertyChanged("IdO")
				Me.OnIdOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDon", DbType:="Int")>  _
	Public Property IdDon() As System.Nullable(Of Integer)
		Get
			Return Me._IdDon
		End Get
		Set
			If (Me._IdDon.Equals(value) = false) Then
				If Me._Donation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdDonChanging(value)
				Me.SendPropertyChanging
				Me._IdDon = value
				Me.SendPropertyChanged("IdDon")
				Me.OnIdDonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeOfProduct", DbType:="VarChar(50)")>  _
	Public Property NumeOfProduct() As String
		Get
			Return Me._NumeOfProduct
		End Get
		Set
			If (String.Equals(Me._NumeOfProduct, value) = false) Then
				Me.OnNumeOfProductChanging(value)
				Me.SendPropertyChanging
				Me._NumeOfProduct = value
				Me.SendPropertyChanged("NumeOfProduct")
				Me.OnNumeOfProductChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(100)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Found", DbType:="VarChar(50)")>  _
	Public Property Found() As String
		Get
			Return Me._Found
		End Get
		Set
			If (String.Equals(Me._Found, value) = false) Then
				Me.OnFoundChanging(value)
				Me.SendPropertyChanging
				Me._Found = value
				Me.SendPropertyChanged("Found")
				Me.OnFoundChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Donation_OtherDonation", Storage:="_Donation", ThisKey:="IdDon", OtherKey:="IdDon", IsForeignKey:=true)>  _
	Public Property Donation() As Donation
		Get
			Return Me._Donation.Entity
		End Get
		Set
			Dim previousValue As Donation = Me._Donation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Donation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Donation.Entity = Nothing
					previousValue.OtherDonations.Remove(Me)
				End If
				Me._Donation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OtherDonations.Add(Me)
					Me._IdDon = value.IdDon
				Else
					Me._IdDon = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Donation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PlatForm")>  _
Partial Public Class PlatForm
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdPlat As Integer
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _PlatFormName As String
	
	Private _Region As String
	
	Private _Classification As String
	
	Private _Description As String
	
	Private _Links As String
	
	Private _points As EntitySet(Of point)
	
	Private _user As EntityRef(Of user)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdPlatChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPlatChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnPlatFormNameChanging(value As String)
    End Sub
    Partial Private Sub OnPlatFormNameChanged()
    End Sub
    Partial Private Sub OnRegionChanging(value As String)
    End Sub
    Partial Private Sub OnRegionChanged()
    End Sub
    Partial Private Sub OnClassificationChanging(value As String)
    End Sub
    Partial Private Sub OnClassificationChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnLinksChanging(value As String)
    End Sub
    Partial Private Sub OnLinksChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._points = New EntitySet(Of point)(AddressOf Me.attach_points, AddressOf Me.detach_points)
		Me._user = CType(Nothing, EntityRef(Of user))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPlat", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdPlat() As Integer
		Get
			Return Me._IdPlat
		End Get
		Set
			If ((Me._IdPlat = value)  _
						= false) Then
				Me.OnIdPlatChanging(value)
				Me.SendPropertyChanging
				Me._IdPlat = value
				Me.SendPropertyChanged("IdPlat")
				Me.OnIdPlatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				If Me._user.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlatFormName", DbType:="VarChar(50)")>  _
	Public Property PlatFormName() As String
		Get
			Return Me._PlatFormName
		End Get
		Set
			If (String.Equals(Me._PlatFormName, value) = false) Then
				Me.OnPlatFormNameChanging(value)
				Me.SendPropertyChanging
				Me._PlatFormName = value
				Me.SendPropertyChanged("PlatFormName")
				Me.OnPlatFormNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="VarChar(50)")>  _
	Public Property Region() As String
		Get
			Return Me._Region
		End Get
		Set
			If (String.Equals(Me._Region, value) = false) Then
				Me.OnRegionChanging(value)
				Me.SendPropertyChanging
				Me._Region = value
				Me.SendPropertyChanged("Region")
				Me.OnRegionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Classification", DbType:="VarChar(50)")>  _
	Public Property Classification() As String
		Get
			Return Me._Classification
		End Get
		Set
			If (String.Equals(Me._Classification, value) = false) Then
				Me.OnClassificationChanging(value)
				Me.SendPropertyChanging
				Me._Classification = value
				Me.SendPropertyChanged("Classification")
				Me.OnClassificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(100)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Links", DbType:="VarChar(100)")>  _
	Public Property Links() As String
		Get
			Return Me._Links
		End Get
		Set
			If (String.Equals(Me._Links, value) = false) Then
				Me.OnLinksChanging(value)
				Me.SendPropertyChanging
				Me._Links = value
				Me.SendPropertyChanged("Links")
				Me.OnLinksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PlatForm_point", Storage:="_points", ThisKey:="IdPlat", OtherKey:="IdPlat")>  _
	Public Property points() As EntitySet(Of point)
		Get
			Return Me._points
		End Get
		Set
			Me._points.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_PlatForm", Storage:="_user", ThisKey:="IdUser", OtherKey:="IdUser", IsForeignKey:=true)>  _
	Public Property user() As user
		Get
			Return Me._user.Entity
		End Get
		Set
			Dim previousValue As user = Me._user.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._user.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._user.Entity = Nothing
					previousValue.PlatForms.Remove(Me)
				End If
				Me._user.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PlatForms.Add(Me)
					Me._IdUser = value.IdUser
				Else
					Me._IdUser = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("user")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_points(ByVal entity As point)
		Me.SendPropertyChanging
		entity.PlatForm = Me
	End Sub
	
	Private Sub detach_points(ByVal entity As point)
		Me.SendPropertyChanging
		entity.PlatForm = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.point")>  _
Partial Public Class point
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdUser As Integer
	
	Private _IdPlat As Integer
	
	Private _PlatForm As EntityRef(Of PlatForm)
	
	Private _user As EntityRef(Of user)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnIdPlatChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPlatChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PlatForm = CType(Nothing, EntityRef(Of PlatForm))
		Me._user = CType(Nothing, EntityRef(Of user))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUser", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				If Me._user.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPlat", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdPlat() As Integer
		Get
			Return Me._IdPlat
		End Get
		Set
			If ((Me._IdPlat = value)  _
						= false) Then
				If Me._PlatForm.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPlatChanging(value)
				Me.SendPropertyChanging
				Me._IdPlat = value
				Me.SendPropertyChanged("IdPlat")
				Me.OnIdPlatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PlatForm_point", Storage:="_PlatForm", ThisKey:="IdPlat", OtherKey:="IdPlat", IsForeignKey:=true)>  _
	Public Property PlatForm() As PlatForm
		Get
			Return Me._PlatForm.Entity
		End Get
		Set
			Dim previousValue As PlatForm = Me._PlatForm.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PlatForm.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PlatForm.Entity = Nothing
					previousValue.points.Remove(Me)
				End If
				Me._PlatForm.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.points.Add(Me)
					Me._IdPlat = value.IdPlat
				Else
					Me._IdPlat = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PlatForm")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_point", Storage:="_user", ThisKey:="IdUser", OtherKey:="IdUser", IsForeignKey:=true)>  _
	Public Property user() As user
		Get
			Return Me._user.Entity
		End Get
		Set
			Dim previousValue As user = Me._user.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._user.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._user.Entity = Nothing
					previousValue.points.Remove(Me)
				End If
				Me._user.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.points.Add(Me)
					Me._IdUser = value.IdUser
				Else
					Me._IdUser = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("user")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[user]")>  _
Partial Public Class user
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdUser As Integer
	
	Private _Name As String
	
	Private _PhoneNo As String
	
	Private _Email As String
	
	Private _Password As String
	
	Private _Sex As String
	
	Private _Age As String
	
	Private _EnterType As String
	
	Private _Con1s As EntitySet(Of Con1)
	
	Private _Doctors As EntitySet(Of Doctor)
	
	Private _Donations As EntitySet(Of Donation)
	
	Private _PlatForms As EntitySet(Of PlatForm)
	
	Private _points As EntitySet(Of point)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnSexChanging(value As String)
    End Sub
    Partial Private Sub OnSexChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As String)
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnEnterTypeChanging(value As String)
    End Sub
    Partial Private Sub OnEnterTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Con1s = New EntitySet(Of Con1)(AddressOf Me.attach_Con1s, AddressOf Me.detach_Con1s)
		Me._Doctors = New EntitySet(Of Doctor)(AddressOf Me.attach_Doctors, AddressOf Me.detach_Doctors)
		Me._Donations = New EntitySet(Of Donation)(AddressOf Me.attach_Donations, AddressOf Me.detach_Donations)
		Me._PlatForms = New EntitySet(Of PlatForm)(AddressOf Me.attach_PlatForms, AddressOf Me.detach_PlatForms)
		Me._points = New EntitySet(Of point)(AddressOf Me.attach_points, AddressOf Me.detach_points)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUser", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sex", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Sex() As String
		Get
			Return Me._Sex
		End Get
		Set
			If (String.Equals(Me._Sex, value) = false) Then
				Me.OnSexChanging(value)
				Me.SendPropertyChanging
				Me._Sex = value
				Me.SendPropertyChanged("Sex")
				Me.OnSexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnterType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EnterType() As String
		Get
			Return Me._EnterType
		End Get
		Set
			If (String.Equals(Me._EnterType, value) = false) Then
				Me.OnEnterTypeChanging(value)
				Me.SendPropertyChanging
				Me._EnterType = value
				Me.SendPropertyChanged("EnterType")
				Me.OnEnterTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_Con1", Storage:="_Con1s", ThisKey:="IdUser", OtherKey:="IdUser")>  _
	Public Property Con1s() As EntitySet(Of Con1)
		Get
			Return Me._Con1s
		End Get
		Set
			Me._Con1s.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_Doctor", Storage:="_Doctors", ThisKey:="IdUser", OtherKey:="IdUser")>  _
	Public Property Doctors() As EntitySet(Of Doctor)
		Get
			Return Me._Doctors
		End Get
		Set
			Me._Doctors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_Donation", Storage:="_Donations", ThisKey:="IdUser", OtherKey:="IdUser")>  _
	Public Property Donations() As EntitySet(Of Donation)
		Get
			Return Me._Donations
		End Get
		Set
			Me._Donations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_PlatForm", Storage:="_PlatForms", ThisKey:="IdUser", OtherKey:="IdUser")>  _
	Public Property PlatForms() As EntitySet(Of PlatForm)
		Get
			Return Me._PlatForms
		End Get
		Set
			Me._PlatForms.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="user_point", Storage:="_points", ThisKey:="IdUser", OtherKey:="IdUser")>  _
	Public Property points() As EntitySet(Of point)
		Get
			Return Me._points
		End Get
		Set
			Me._points.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Con1s(ByVal entity As Con1)
		Me.SendPropertyChanging
		entity.user = Me
	End Sub
	
	Private Sub detach_Con1s(ByVal entity As Con1)
		Me.SendPropertyChanging
		entity.user = Nothing
	End Sub
	
	Private Sub attach_Doctors(ByVal entity As Doctor)
		Me.SendPropertyChanging
		entity.user = Me
	End Sub
	
	Private Sub detach_Doctors(ByVal entity As Doctor)
		Me.SendPropertyChanging
		entity.user = Nothing
	End Sub
	
	Private Sub attach_Donations(ByVal entity As Donation)
		Me.SendPropertyChanging
		entity.user = Me
	End Sub
	
	Private Sub detach_Donations(ByVal entity As Donation)
		Me.SendPropertyChanging
		entity.user = Nothing
	End Sub
	
	Private Sub attach_PlatForms(ByVal entity As PlatForm)
		Me.SendPropertyChanging
		entity.user = Me
	End Sub
	
	Private Sub detach_PlatForms(ByVal entity As PlatForm)
		Me.SendPropertyChanging
		entity.user = Nothing
	End Sub
	
	Private Sub attach_points(ByVal entity As point)
		Me.SendPropertyChanging
		entity.user = Me
	End Sub
	
	Private Sub detach_points(ByVal entity As point)
		Me.SendPropertyChanging
		entity.user = Nothing
	End Sub
End Class
